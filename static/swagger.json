{
  "swagger" : "2.0",
  "info" : {
    "description" : "This is a simple API for controlling your Vector",
    "version" : "0.1.0",
    "title" : "Vector Dashboard API",
    "contact" : {
      "email" : "Alex.D.Thiel@gmail.com"
    },
    "license" : {
      "name" : "MIT License",
      "url" : "https://opensource.org/licenses/MIT"
    }
  },
  "tags" : [ {
    "name" : "robot",
    "description" : "All operations directly related to robot state"
  }, {
    "name" : "robot.behavior",
    "description" : "All movement operations for the robot"
  }, {
    "name" : "robot.camera",
    "description" : "All operations regarding getting frames from the camera"
  } ],
  "paths" : {
    "/api/robot/get_battery_state" : {
      "get" : {
        "tags" : [ "robot" ],
        "summary" : "Get all battery information from the robot.",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Information about the robots battery level",
            "schema" : {
              "$ref" : "#/definitions/BatteryStateResponse"
            }
          },
          "503" : {
            "$ref" : "#/definitions/StatusCode503Robot"
          }
        }
      }
    },
    "/api/robot/camera" : {
      "get" : {
        "tags" : [ "robot.camera" ],
        "summary" : "Recieve an MJPEG stream of the robots camera",
        "responses" : {
          "200" : {
            "$ref" : "#/definitions/StatusCode200Robot"
          }
        }
      }
    },
    "/api/robot/behavior/drive_off_charger" : {
      "post" : {
        "tags" : [ "robot.behavior" ],
        "summary" : "Move the robot off of the charging station",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "$ref" : "#/definitions/StatusCode200Robot"
          },
          "503" : {
            "$ref" : "#/definitions/StatusCode503Robot"
          }
        }
      }
    },
    "/api/robot/behavior/drive_on_charger" : {
      "post" : {
        "tags" : [ "robot.behavior" ],
        "summary" : "Tell the robot to find and get onto the charging station",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "$ref" : "#/definitions/StatusCode200Robot"
          },
          "503" : {
            "$ref" : "#/definitions/StatusCode503Robot"
          }
        }
      }
    },
    "/api/robot/behavior/dock_with_cube" : {
      "post" : {
        "tags" : [ "robot.behavior" ],
        "summary" : "Tells Vector to dock with a light cube, optionally using  a given approach angle and distance.",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "$ref" : "#/definitions/StatusCode200Robot"
          },
          "503" : {
            "$ref" : "#/definitions/StatusCode503Robot"
          }
        }
      }
    },
    "/api/robot/behavior/drive_straight" : {
      "post" : {
        "tags" : [ "robot.behavior" ],
        "summary" : "Tells Vector to drive in a straight line.",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The parameters for the move action.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DriveStraightParameters"
          }
        } ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "$ref" : "#/definitions/StatusCode200Robot"
          },
          "503" : {
            "$ref" : "#/definitions/StatusCode503Robot"
          }
        }
      }
    },
    "/api/robot/behavior/turn_in_place" : {
      "post" : {
        "tags" : [ "robot.behavior" ],
        "summary" : "Turn the robot around its current position.",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The parameters for the turn action.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DriveTurnParameters"
          }
        } ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "$ref" : "#/definitions/StatusCode200Robot"
          },
          "503" : {
            "$ref" : "#/definitions/StatusCode503Robot"
          }
        }
      }
    },
    "/api/robot/behavior/set_head_angle" : {
      "post" : {
        "tags" : [ "robot.behavior" ],
        "summary" : "Tell Vectors head to move to a given angle.",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The parameters for the head action",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SetHeadAngleParameters"
          }
        } ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "$ref" : "#/definitions/StatusCode200Robot"
          },
          "503" : {
            "$ref" : "#/definitions/StatusCode503Robot"
          }
        }
      }
    },
    "/api/robot/behavior/set_lift_height" : {
      "post" : {
        "tags" : [ "robot.behavior" ],
        "summary" : "Tell Vectors lift to move to a given height.",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The parameters for the lift action",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SetLiftHeightParameters"
          }
        } ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "$ref" : "#/definitions/StatusCode200Robot"
          },
          "503" : {
            "$ref" : "#/definitions/StatusCode503Robot"
          }
        }
      }
    }
  },
  "definitions" : {
    "DriveStraightParameters" : {
      "type" : "object",
      "properties" : {
        "distance" : {
          "type" : "integer",
          "description" : "Distance, in milimeters. If positive, movement will be forward. If negative, distance will be backwards.",
          "example" : 100
        },
        "speed" : {
          "type" : "integer",
          "description" : "Speed in milimeters/second",
          "example" : 60,
          "minimum" : 0,
          "maximum" : 100
        }
      }
    },
    "DriveTurnParameters" : {
      "type" : "object",
      "properties" : {
        "angle" : {
          "type" : "number",
          "example" : 3.14159,
          "description" : "The angle to turn, in radians. Positive values turn left, negative values turn right. "
        },
        "speed" : {
          "type" : "number",
          "description" : "Angular turn speed in rad/sec",
          "default" : 1.570795,
          "example" : 1.570795
        },
        "accel" : {
          "type" : "number",
          "description" : "Acceleration in radians/sec^2",
          "default" : 0
        }
      }
    },
    "SetHeadAngleParameters" : {
      "type" : "object",
      "properties" : {
        "angle" : {
          "type" : "number",
          "description" : "Desired angle for Vectors head, in radians",
          "minimum" : -0.383972435,
          "maximum" : 0.785398
        },
        "accel" : {
          "type" : "number",
          "description" : "Acceleration of Vectors head in radians per second squared.",
          "default" : 10.0,
          "example" : 10.0
        },
        "max_speed" : {
          "type" : "number",
          "description" : "Maximum speed of Vectors head in radians per second.",
          "default" : 10.0,
          "example" : 10.0
        },
        "duration" : {
          "type" : "number",
          "description" : "Time for Vector's head to move in seconds. A value of zero will make Vector try to do it as quickly as possible.",
          "default" : 0.0,
          "example" : 1.0
        }
      }
    },
    "SetLiftHeightParameters" : {
      "type" : "object",
      "properties" : {
        "height" : {
          "type" : "number",
          "description" : "A number between 0.0 and 1.0, representing the height percentage",
          "example" : 0.5,
          "minimum" : 0.0,
          "maximum" : 1.0
        },
        "accel" : {
          "type" : "number",
          "description" : "Acceleration of Vectors lift in radian/sec^2",
          "minimum" : 0.0,
          "default" : 10.0,
          "example" : 10.0
        },
        "max_speed" : {
          "type" : "number",
          "description" : "Maximum speed of Vectors lift in radian/sec",
          "default" : 10.0,
          "example" : 10.0
        },
        "duration" : {
          "type" : "number",
          "description" : "Time for Vector's lift to move in seconds. A value of zero will make Vector try to do it as quickly as possible.",
          "default" : 0.0,
          "example" : 0.0
        }
      }
    },
    "StatusCode200Robot" : {
      "description" : "Returns this code if the robot was reached"
    },
    "StatusCode503Robot" : {
      "description" : "This is received when the robot could not be connected with"
    },
    "BatteryStateResponse" : {
      "type" : "object",
      "properties" : {
        "battery_level" : {
          "type" : "string",
          "enum" : [ "BATTERY_LEVEL_FULL", "BATTERY_LEVEL_NOMINAL", "BATTERY_LEVEL_LOW", "BATTERY_LEVEL_UNKNOWN" ]
        },
        "battery_volts" : {
          "type" : "number"
        },
        "is_charging" : {
          "type" : "boolean",
          "description" : "If the robot is actively charging"
        },
        "is_on_charging_platform" : {
          "type" : "boolean",
          "description" : "If the robot is physically on the platform"
        },
        "suggested_charger_sec" : {
          "type" : "number",
          "description" : "How many seconds left for the robot to charge to ideal level"
        }
      }
    }
  },
  "schemes" : [ "http" ]
}